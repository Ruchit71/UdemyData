**Resiliency and Recovery Plan: Rebuilding Midas Shadowcore Infrastructure and Application**

**Objective:**
To rebuild the Midas Shadowcore infrastructure and application from scratch by the end of 2024, demonstrating the team’s capability to completely restore the systems if needed.

---

**Acceptance Criteria:**

1. Complete application infrastructure teardown and rebuild.
2. Completion of regression testing.
3. Attachment of proof of application rebuild to the Jira story.

---

**Scope and Exclusions:**

- **Scope:** Rebuild encompasses all resources and infrastructure components that do not require external ServiceNow tickets to restore.
- **Exclusions:** Resources requiring ServiceNow tickets for restoration are out of scope.

---

**Approach and Activity Tracker:**

**Phase 1: Preparation**

1. **Review and Document Existing Runbooks**
   - Ensure runbooks are up to date.
   - Identify any gaps in procedures or documentation.

2. **Setup for Non-Prod Testing**
   - Select a non-production account for testing.
   - Communicate timelines and testing schedules with stakeholders.

**Phase 2: Execution**

1. **Infrastructure Tear Down**
   - Decommission existing infrastructure in the non-prod account.
   - Confirm complete teardown.

2. **Rebuild Infrastructure**
   - Recreate infrastructure using the Terraform pipeline.
   - Verify that all components are properly provisioned.

3. **Application Deployment**
   - Redeploy the Azure Function application.
   - Confirm deployment success.

4. **Database Restoration**
   - Restore the database snapshot from a deleted DB using the “Dump and Restore” method for Azure Database for PostgreSQL – Flexible Server.
   - Validate the database is restored and operational.

5. **Data Processing**
   - Run the Azure Data Factory pipeline.
   - Verify data processing and pipeline functionality.

**Phase 3: Validation**

1. **Regression Testing**
   - Execute regression test suites to ensure application functionality.
   - Document results and address any issues identified.

2. **Verification of Rebuild**
   - Confirm that all services and components are operational.
   - Validate that the system matches the state prior to teardown.

**Phase 4: Documentation and Reporting**

1. **Proof of Rebuild**
   - Compile logs, screenshots, and other documentation as proof of successful rebuild.
   - Attach documentation to the Jira story.

2. **Stakeholder Review**
   - Share results and lessons learned with Hillary Reser and the Resilience and Recovery team.
   - Address feedback and refine runbooks as necessary.

---

**Runbook Structure:**

**1. Introduction**

- The purpose of this runbook is to outline the steps for tearing down and rebuilding the Midas Shadowcore infrastructure and application to ensure resilience and recovery capability.
- The scope includes all internal resources excluding those requiring ServiceNow tickets.

**2. Prerequisites**

- **Access Requirements:** Ensure access to the non-prod account and required tools (Terraform, Azure Portal, Database utilities).
- **Backup Verification:** Confirm availability and integrity of database snapshots.
- **Notifications:** Inform stakeholders of scheduled activity.

**3. Infrastructure Tear Down**

- Navigate to the non-prod account.
- Identify and decommission all infrastructure components (compute, storage, network, etc.).
- Validate that all resources have been removed.

**4. Infrastructure Rebuild**

- Execute the Terraform pipeline to recreate infrastructure.
- Verify that:
  - Compute resources (VMs, functions) are provisioned.
  - Storage accounts and configurations are accurate.
  - Network settings (VPC, subnets, security groups) are correct.

**5. Application Deployment**

- Deploy the Azure Function application using the deployment pipeline.
- Verify:
  - Application endpoints are reachable.
  - Configuration settings match expected values.

**6. Database Restoration**

- Use the "Dump and Restore" method:
  - Take the database dump from the snapshot.
  - Restore it to a new database instance.
- Validate:
  - Database schema integrity.
  - Successful connection to the application.

**7. Data Processing Verification**

- Trigger the Azure Data Factory pipeline.
- Verify:
  - Pipeline completes without errors.
  - Data outputs match expected results.

**8. Testing and Validation**

- Execute regression test suites:
  - Functional tests.
  - Performance checks.
  - End-to-end scenarios.
- Ensure no major issues are encountered.

**9. Documentation and Reporting**

- Collect logs, screenshots, and configuration details.
- Compile them into a rebuild report.
- Attach the report to the Jira story.

**10. Troubleshooting**

- **Common Issues:**
  - Terraform state lock issues.
  - Database connection errors.
- **Resolutions:**
  - Retry or unlock Terraform state.
  - Validate database connection strings.
- **Escalation Contacts:**
  - Infrastructure lead.
  - Database administrator.

---

**Ownership:**

- Requested by: Hillary Reser (Resilience and Recovery Team)
- Implementation Lead: Ruchit Nahata
- Reviewer: Mitchell Phillips

---

**Notes and Recommendations:**

- **Backup Verification:** Ensure backup mechanisms are tested and reliable before proceeding with teardown.
- **Time Buffer:** Allocate sufficient time for unforeseen challenges during the rebuild.
- **Collaboration:** Encourage team input to refine the process and accommodate service-specific nuances.

stages:
  - dump
  - restore

variables:
  POSTGRES_HOST: trstans1midaps2d.postgres.database.azure.com
  POSTGRES_USER: trustadmin
  POSTGRES_PASSWORD: My:s3Cr3t/
  POSTGRES_PORT: 5432
  POSTGRES_DB: shadowcore_test

dump_database:
  stage: dump
  image: postgres:14
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - pg_dump -h $POSTGRES_HOST -U $POSTGRES_USER -p $POSTGRES_PORT $POSTGRES_DB > shadowcore_test_dump.sql
  artifacts:
    paths:
      - shadowcore_test_dump.sql

restore_database:
  stage: restore
  image: postgres:14
  dependencies:
    - dump_database
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - createdb -h $POSTGRES_HOST -U $POSTGRES_USER -p $POSTGRES_PORT shadowcore_test_copy
    - psql -h $POSTGRES_HOST -U $POSTGRES_USER -p $POSTGRES_PORT -f shadowcore_test_dump.sql shadowcore_test_copy



docker run -d --name postgres-container -e TZ=UTC -e POSTGRES_PASSWORD=My:s3Cr3t/ -p 30432:5432 ubuntu/postgres:14-22.04_beta
docker exec -it postgres-container pg_dump shadowcore_test -h trstans1midaps2d.postgres.database.azure.com -U trustadmin -p 5432 > shadowcore_test_dump.sql
docker exec -it postgres-container createdb shadowcore_test_copy -h trstans1midaps2d.postgres.database.azure.com -p 5432 -U trustadmin
docker exec -it postgres-container psql -f shadowcore_test_dump.sql shadowcore_test_copy -h trstans1midaps2d.postgres.database.azure.com -p 5432 -U trustadmin

