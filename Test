from locust import HttpUser, task, between
import random
from datetime import datetime, timedelta

class AccountLoadTest(HttpUser):
    wait_time = between(1, 3)  # Wait time between requests (1 to 3 seconds)

    def generate_payload(self, count=10000):
        """
        Generate a payload with `count` number of account records.
        """
        payload = []
        for i in range(count):
            account_number = random.randint(1000000000, 9999999999)
            customer_id = f"O{random.randint(10000, 99999)}"
            date_opened = (datetime.now() - timedelta(days=random.randint(1, 5000))).strftime("%Y-%m-%d")
            account_holder_name = f"Company {i}"
            entity_name = f"Entity {i}"
            office_name = f"Office {i}"
            major_account_type = "CK"
            minor_account_type = random.choice(["CK01", "CK08"])
            account_status = random.choice(["ACT", "APPR", "INACT"])
            available_balance = f"{random.uniform(0, 100000):.2f}"
            current_balance = f"{random.uniform(0, 100000):.2f}"
            address_line1 = f"{random.randint(1, 9999)} Main St"
            city = f"City {i}"
            state = random.choice(["CA", "NY", "TX", "AZ"])
            zip_code = f"{random.randint(10000, 99999)}"
            country = "USA"

            payload.append({
                "ACCOUNTNUMBER": account_number,
                "CUSTOMERID": customer_id,
                "DATEOPENED": date_opened,
                "ACCOUNTHOLDERNAME": account_holder_name,
                "ENTITYNAME": entity_name,
                "OFFICENAME": office_name,
                "TITLE3": "",
                "MAJORACCOUNTTYPE": major_account_type,
                "MINORACCOUNTTYPE": minor_account_type,
                "ACCOUNTSTATUS": account_status,
                "AVAILABLEBALANCE": available_balance,
                "CURRENTBALANCE": current_balance,
                "ADDRESSLINE1": address_line1,
                "ADDRESSLINE2": f"{city}, {state} {zip_code}",
                "ADDRESSLINE3": "",
                "CITY": city,
                "STATE": state,
                "ZIP": zip_code,
                "COUNTRY": country
            })
        return payload

    @task
    def post_account_data(self):
        # Generate a payload with 10,000 records
        payload = self.generate_payload(10000)

        # URL to send the request
        url = "https://trst-n-1-core-af-123.trst-n-1-mida-ae-1-d.appserviceenvironment.net/accounts"
        
        # Send a POST request
        with self.client.post(url, json=payload, catch_response=True) as response:
            if response.status_code == 200:
                response.success()
            else:
                response.failure(f"Failed with status code: {response.status_code}")
