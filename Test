from sqlalchemy.ext.asyncio import AsyncSession
from models import Customer, Account  # Import your SQLAlchemy models
from schemas import CustomerSchema, AccountSchema  # Import corresponding Pydantic schemas
from crud_factory import CrudFactory  # Import your CrudFactory

# Create CRUD handlers for Customer and Account models
CustomerCrud = CrudFactory(Customer)
AccountCrud = CrudFactory(Account)

async def create_or_update_customer_and_account(session: AsyncSession, customer_data: dict, account_data: dict):
    """
    Creates or updates a customer and their associated account.

    Args:
        session (AsyncSession): SQLAlchemy async session
        customer_data (dict): Data for the customer, matching the CustomerSchema
        account_data (dict): Data for the account, matching the AccountSchema

    Returns:
        tuple: Updated or created Customer and Account models
    """
    # Convert input dictionaries to Pydantic schemas
    customer_schema = CustomerSchema(**customer_data)
    account_schema = AccountSchema(**account_data)

    # Create or update Customer
    customer = await CustomerCrud.get_one_by_id(session, customer_data["id"], column="id")
    if customer:
        customer = await CustomerCrud.update_by_id(session, customer_schema, id_=customer_data["id"], column="id")
    else:
        customer = await CustomerCrud.create(session, customer_schema)

    # Create or update Account
    account = await AccountCrud.get_one_by_id(session, account_data["account_number"], column="account_number")
    if account:
        account = await AccountCrud.update_by_id(session, account_schema, id_=account_data["account_number"], column="account_number")
    else:
        account = await AccountCrud.create(session, account_schema)

    return customer, account
