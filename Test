async def create_or_update_customer_and_account(data: list[dict]):
    """
    Creates or updates customers and their associated accounts in batches.

    Args:
        data (list[dict]): List of dictionaries containing customer and account data.
    """
    CustomerCrud = crud.CrudFactory(Customer)
    AccountCrud = crud.CrudFactory(Account)

    customer_updates = {}
    account_updates = []

    async with SessionLocal() as session:
        # Fetch existing customers
        customer_ids = [entry["CUSTOMERID"] for entry in data]
        existing_customers = await CustomerCrud.get_many_by_ids(
            session, ids=customer_ids, column="customer_id"
        )
        existing_customer_map = {customer.customer_id: customer for customer in existing_customers}

        # Process customer data
        for entry in data:
            customer_schema = CustomerSchema(
                customer_id=entry["CUSTOMERID"],
                account_holder_name=entry["ACCOUNTHOLDERNAME"],
                entity_name=entry["ENTITYNAME"],
                office_name=entry["OFFICENAME"],
                title3=entry["TITLE3"],
                address_line1=entry["ADDRESSLINE1"],
                address_line2=entry["ADDRESSLINE2"],
                address_line3=entry["ADDRESSLINE3"],
                city=entry["CITY"],
                state=entry["STATE"],
                zip=entry["ZIP"],
                country=entry["COUNTRY"],
            )

            if entry["CUSTOMERID"] in existing_customer_map:
                customer = existing_customer_map[entry["CUSTOMERID"]]
                if any(
                    getattr(customer, field) != value
                    for field, value in customer_schema.dict().items()
                    if hasattr(customer, field)
                ):
                    customer_updates[customer.uuid] = customer_schema
            else:
                customer_updates[entry["CUSTOMERID"]] = customer_schema

        # Update customers in bulk
        if customer_updates:
            await CustomerCrud.update_many_by_ids(session, customer_updates)

        # Fetch all updated/created customers to map their UUIDs
        updated_customers = await CustomerCrud.get_many_by_ids(
            session, ids=customer_ids, column="customer_id"
        )
        customer_uuid_map = {customer.customer_id: customer.uuid for customer in updated_customers}

        # Process account data
        account_numbers = [entry["ACCOUNTNUMBER"] for entry in data]
        existing_accounts = await AccountCrud.get_many_by_ids(
            session, ids=account_numbers, column="account_number"
        )
        existing_account_map = {account.account_number: account for account in existing_accounts}

        for entry in data:
            account_schema = AccountSchema(
                customer_uuid=customer_uuid_map[entry["CUSTOMERID"]],
                account_number=str(entry["ACCOUNTNUMBER"]),
                date_opened=datetime.strptime(entry["DATEOPENED"], "%Y-%m-%d"),
                major_account_type=entry["MAJORACCOUNTTYPE"],
                minor_account_type=entry["MINORACCOUNTTYPE"],
                account_status=entry["ACCOUNTSTATUS"],
                available_balance=float(entry["AVAILABLEBALANCE"]),
                current_balance=float(entry["CURRENTBALANCE"]),
            )

            if entry["ACCOUNTNUMBER"] in existing_account_map:
                account = existing_account_map[entry["ACCOUNTNUMBER"]]
                if any(
                    getattr(account, field) != value
                    for field, value in account_schema.dict().items()
                    if hasattr(account, field)
                ):
                    account_updates.append(account_schema)
            else:
                account_updates.append(account_schema)

        # Update accounts in bulk
        if account_updates:
            await AccountCrud.create_many(session, account_updates)


# Placeholder for schemas to create new customers
new_customers = []

# Iterate through the data
for entry in customer_data:
    customer_schema = generate_customer_schema(entry)  # Replace with your schema generation logic

    if entry["CUSTOMERID"] in existing_customer_map:
        customer = existing_customer_map[entry["CUSTOMERID"]]

        # Compare and update mismatched fields
        existing_data = {
            field: getattr(customer, field)
            for field, value in customer_schema.dict().items()
            if hasattr(customer, field)
        }
        if existing_data != customer_schema.dict():
            customer_updates[customer.uuid] = customer_schema
    else:
        # Collect new customer schemas for bulk creation
        new_customers.append(customer_schema)

# Perform updates for existing customers
for customer_uuid, schema in customer_updates.items():
    # Update each existing customer in the database
    await update_customer_in_db(customer_uuid, schema)

# Bulk create new customers in the database
if new_customers:
    await create_many(new_customers)  # Bulk create in one operation
