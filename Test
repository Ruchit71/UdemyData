#!/bin/env python
"""Load test model"""
import random
from datetime import datetime, timedelta

from locust import HttpUser, task, constant_throughput

from load_tests import constants, load_test_helper

class AccountLoadTest(HttpUser):
    wait_time = constant_throughput(0.1)

    host = constants.APIM_DEV_HOST_URL

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.token = None

    def generate_payload(self, count=10000):
        """
        Generate a payload with `count` number of account records, where half are new and half are updates.
        """
        payload = []
        existing_accounts = []

        # Generate 5,000 new accounts
        for i in range(count // 2):
            account_number = random.randint(1000000000, 9999999999)
            customer_id = f"O{random.randint(10000, 99999)}"
            date_opened = (
                datetime.now() - timedelta(days=random.randint(1, 5000))
            ).strftime("%Y-%m-%d")
            account_holder_name = f"Company {i}"
            entity_name = f"Entity {i}"
            office_name = f"Office {i}"
            major_account_type = "CK"
            minor_account_type = random.choice(["CK01", "CK08"])
            account_status = random.choice(["ACT", "APPR", "IACT"])
            available_balance = f"{random.uniform(0, 100000):.2f}"
            current_balance = f"{random.uniform(0, 100000):.2f}"
            address_line1 = f"{random.randint(1, 9999)} Main St"
            city = f"City {i}"
            state = random.choice(["CA", "NY", "TX", "AZ"])
            zip_code = f"{random.randint(10000, 99999)}"
            country = "USA"

            account_data = {
                "ACCOUNTNUMBER": account_number,
                "CUSTOMERID": customer_id,
                "DATEOPENED": date_opened,
                "ACCOUNTHOLDERNAME": account_holder_name,
                "ENTITYNAME": entity_name,
                "OFFICENAME": office_name,
                "TITLE3": "",
                "MAJORACCOUNTTYPE": major_account_type,
                "MINORACCOUNTTYPE": minor_account_type,
                "ACCOUNTSTATUS": account_status,
                "AVAILABLEBALANCE": available_balance,
                "CURRENTBALANCE": current_balance,
                "ADDRESSLINE1": address_line1,
                "ADDRESSLINE2": f"{city}, {state} {zip_code}",
                "ADDRESSLINE3": "",
                "CITY": city,
                "STATE": state,
                "ZIP": zip_code,
                "COUNTRY": country,
            }

            payload.append(account_data)
            existing_accounts.append(account_data)

        # Generate 5,000 updates for existing accounts
        for i in range(count // 2):
            account_to_update = random.choice(existing_accounts)
            updated_account = account_to_update.copy()

            # Update a few fields to simulate changes
            updated_account["AVAILABLEBALANCE"] = f"{random.uniform(0, 100000):.2f}"
            updated_account["CURRENTBALANCE"] = f"{random.uniform(0, 100000):.2f}"
            updated_account["ACCOUNTSTATUS"] = random.choice(["ACT", "IACT", "APPR"])

            payload.append(updated_account)

        return payload

    @task
    def post_account_data(self):
        # Generate a payload with 10,000 records (5,000 new and 5,000 updates)
        payload = self.generate_payload(10000)

        # Send a POST request
        with self.client.post(
            url="/accounts",
            json=payload,
            headers={"Authorization": f"Bearer {self.token}"},
            catch_response=True,
        ) as response:
            if response.status_code == 200:
                response.success()
            else:
                response.failure(f"Failed with status code: {response.text}")

    def on_start(self):
        """on_start is called when a Locust start before any task is scheduled"""
        self.token = load_test_helper.generate_test_token()
