async def create_or_update_customer_and_account(
    logger: EventHubLogger,
    account_message: dict[str, Any],
) -> None:
    """
    Create or update customer and account data in the database.

    Parameters:
    - logger: EventHubLogger instance for logging.
    - account_message: Dictionary containing account and customer details.
    """
    session = crud.get_session()  # Assuming `crud.get_session` initializes the AsyncSession

    try:
        # Extract and map customer data
        customer_data = {
            "customer_id": account_message.get("CUSTOMERID"),
            "address_line1": account_message.get("ADDRESSLINE1"),
            "address_line2": account_message.get("ADDRESSLINE2"),
            "address_line3": account_message.get("ADDRESSLINE3"),
            "city": account_message.get("CITY"),
            "state": account_message.get("STATE"),
            "zip": account_message.get("ZIP"),
            "country": account_message.get("COUNTRY"),
        }

        customer_schema = CustomerSchema(**customer_data)
        CustomerCrud = crud.CrudFactory(Customer)

        existing_customer = await CustomerCrud.get_by_id(
            session, customer_data["customer_id"], column="customer_id"
        )

        if existing_customer:
            logger.log(f"Updating customer {customer_data['customer_id']}")
            await CustomerCrud.update_by_id(
                session, customer_schema, customer_data["customer_id"], column="customer_id"
            )
        else:
            logger.log(f"Creating new customer {customer_data['customer_id']}")
            await CustomerCrud.create(session, customer_schema)

        # Extract and map account data
        account_data = {
            "account_number": account_message.get("ACCOUNTNUMBER"),
            "customer_id": account_message.get("CUSTOMERID"),
            "date_opened": account_message.get("DATEOPENED"),
            "account_holder_name": account_message.get("ACCOUNTHOLDERNAME"),
            "entity_name": account_message.get("ENTITYNAME"),
            "office_name": account_message.get("OFFICENAME"),
            "title3": account_message.get("TITLE3"),
            "major_account_type": account_message.get("MAJORACCOUNTTYPE"),
            "minor_account_type": account_message.get("MINORACCOUNTTYPE"),
            "account_status": account_message.get("ACCOUNTSTATUS"),
            "available_balance": account_message.get("AVAILABLEBALANCE"),
            "current_balance": account_message.get("CURRENTBALANCE"),
        }

        account_schema = AccountSchema(**account_data)
        AccountCrud = crud.CrudFactory(Account)

        existing_account = await AccountCrud.get_by_id(
            session, account_data["account_number"], column="account_number"
        )

        if existing_account:
            logger.log(f"Updating account {account_data['account_number']}")
            await AccountCrud.update_by_id(
                session, account_schema, account_data["account_number"], column="account_number"
            )
        else:
            logger.log(f"Creating new account {account_data['account_number']}")
            await AccountCrud.create(session, account_schema)

    except Exception as ex:
        logger.log_critical(f"Error while processing account message: {ex}")
        raise
    finally:
        await session.close()
