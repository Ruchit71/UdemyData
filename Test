@pytest.fixture(scope="function", name="mock_crud_factory")
def fixture_mock_crud_factory(mocker: MockerFixture):
    """Fixture to mock CrudFactory for unit tests"""
    return mocker.patch(MOCK_CRUD_FACTORY)


@pytest.fixture(scope="function", name="async_mock_event_hub_logger")
def fixture_async_mock_event_hub_logger(mocker: MockerFixture):
    """Fixture for async mock EventHubLogger"""
    mock_logger = AsyncMock()
    mock_logger.log = AsyncMock()
    mock_logger.log_error = AsyncMock()
    mock_logger.log_critical = AsyncMock()
    mock_logger.log_dead_letter = AsyncMock()
    mock_logger.send_success_response = AsyncMock()
    mock_logger.send_critical_status = AsyncMock()
    return mock_logger


@pytest.mark.asyncio
async def test_service_bus_queue_reader_success(
    mocker: MockerFixture,
    async_mock_logger,
    mock_crud_factory,
):
    """Test successful processing of Service Bus queue message"""

    # Arrange
    encrypted_message_body = "mock_encrypted_message"
    decrypted_message_body = json.dumps([
        {
            "ACCOUNTNUMBER": 1010450002,
            "CUSTOMERID": "O10025",
            "DATEOPENED": "2021-03-18",
            "ACCOUNTHOLDERNAME": "FIRST AMERICAN TITLE INSURANCE COMPANY",
            "ENTITYNAME": "FIRST AMERICAN TITLE INSURANCE COMPANY",
            "OFFICENAME": "INTERNATIONAL CASH OPERATING ACCOUNT",
            "TITLE3": "",
            "MAJORACCOUNTTYPE": "CK",
            "MINORACCOUNTTYPE": "CK01",
            "ACCOUNTSTATUS": "ACT",
            "AVAILABLEBALANCE": "2124",
            "CURRENTBALANCE": "2124",
            "ADDRESSLINE1": "1 FIRST AMERICAN WAY",
            "ADDRESSLINE2": "SANTA ANA CA 92701",
            "ADDRESSLINE3": "",
            "CITY": "SANTA ANA",
            "STATE": "CA",
            "ZIP": "92701",
            "COUNTRY": "USA"
        }
    ])
    mock_service_bus_message = create_service_bus_message(encrypted_message_body)
    mocker.patch("blueprints.process_accounts.cryptography_service.decrypt", return_value=decrypted_message_body)
    
    mock_session = MagicMock()
    mocker.patch("blueprints.process_accounts.SessionLocal", return_value=mock_session)

    # Act
    await service_bus_queue_reader(mock_service_bus_message)

    # Assert
    async_mock_logger.log.assert_called_with(
        f"Received 1 messages from pending_accounts queue."
    )
    async_mock_logger.send_success_response.assert_called_with("Messages processed successfully.")


@pytest.mark.asyncio
async def test_service_bus_queue_reader_validation_error(
    mocker: MockerFixture,
    async_mock_logger,
):
    """Test validation error during message processing"""

    # Arrange
    encrypted_message_body = "mock_encrypted_message"
    invalid_decrypted_message_body = json.dumps([
        {
            "ACCOUNTNUMBER": 1010450002,
            "CUSTOMERID": "O10025",
            # Missing required fields such as DATEOPENED, ACCOUNTHOLDERNAME, etc.
        }
    ])
    mock_service_bus_message = create_service_bus_message(encrypted_message_body)
    mocker.patch("blueprints.process_accounts.cryptography_service.decrypt", return_value=invalid_decrypted_message_body)

    # Act
    await service_bus_queue_reader(mock_service_bus_message)

    # Assert
    async_mock_logger.log_error.assert_called_with("Validation Error:")
    async_mock_logger.send_critical_status.assert_called_once()


@pytest.mark.asyncio
async def test_service_bus_queue_reader_unexpected_exception(
    mocker: MockerFixture,
    async_mock_logger,
):
    """Test unexpected exception during message processing"""

    # Arrange
    encrypted_message_body = "mock_encrypted_message"
    mock_service_bus_message = create_service_bus_message(encrypted_message_body)
    mocker.patch("blueprints.process_accounts.cryptography_service.decrypt", side_effect=Exception("Unexpected error"))

    # Act
    await service_bus_queue_reader(mock_service_bus_message)

    # Assert
    async_mock_logger.log_critical.assert_called_once_with("Error: Unexpected error of Type: <class 'Exception'>")
    async_mock_logger.send_critical_status.assert_not_called()
